with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken,\n Averaged Across All
Days"))
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
abline(v = max(average_steps_interval$MeanSteps))
abline(v = max(average_steps_interval$Interval))
max(average_steps_interval$MeanSteps)
average_steps_interval$Interval[average_steps_interval$MeanSteps == max(average_steps_interval$MeanSteps)]
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue")
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 0.5, y = 0.5, legend = "800")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 1, y = 1, legend = "800")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 100, y = 100, legend = "800")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 200, y = 200, legend = "800")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 200, y = 200, legend = "800", bty = "o")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 200, y = 200, legend = "800", bty = "n")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 200, y = 200, legend = "800", bty = "n", col = "blue")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 200, y = 200, legend = max_steps_interval, bty = "n", col = "blue")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 200, y = 200, legend = max_steps_interval, bty = "n", text.col = "blue")
source("analysis.R")
analysis()
source("analysis.R")
analysis()
source("analysis.R")
analysis()
source("analysis.R")
analysis()
library(lubridate)
library(ggplot2)
##### Loading and preprocessing the data
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",
destfile = "activity.zip")
unzip(zipfile = "activity.zip")
activity <- read.csv(file = "activity.csv")
##### Mean total number of steps taken per day
# Total number of steps taken per day
total_steps_day <- aggregate(x = activity$steps, by = list(activity$date), FUN = sum, na.rm = TRUE)
names(total_steps_day) <- c("Date", "TotalSteps")
# Mean and median of the total number of steps taken per day
mean_total_steps_day <- mean(x = total_steps_day$TotalSteps)
median_total_steps_day <- median(x = total_steps_day$TotalSteps)
cuts1 <- data.frame(Summary = "Mean", vals = mean_total_steps_day)
cuts2 <- data.frame(Summary = "Median", vals = median_total_steps_day)
cuts <- rbind(cuts1, cuts2)
print(noquote("What are the mean and median of the total number of steps taken per day?"))
write.table(cuts, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Histogram of the total number of steps taken each day
png(filename = "total_steps_day.png")
ggplot(data = total_steps_day, mapping = aes(total_steps_day$TotalSteps))+geom_histogram(binwidth = 1000)+
labs(x="Total Number of Steps Taken Per Day", y="Count")+
geom_vline(data=cuts, aes(xintercept=vals, linetype=Summary, colour = Summary), show.legend = TRUE)+
theme(legend.position=c(0.8, 0.8))+ggsave("total_steps_day.png")
##### Average daily activity pattern
# Time series plot of the 5-minute interval and the average number of steps taken, averaged across all days
average_steps_interval <- aggregate(x = activity$steps, by = list(activity$interval), FUN = mean, na.rm = TRUE)
names(average_steps_interval) <- c("Interval", "MeanSteps")
png("time_series_plot.png")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 200, y = 200, legend = max_steps_interval, bty = "n", text.col = "blue")
dev.off()
print(noquote("Which 5-minute interval, on average across all the days in the dataset,"))
print(noquote("contains the maximum number of steps?"))
print(max_steps_interval)
sum(is.na(activity$steps))
sum(is.na(activity$date))
sum(is.na(activity$interval))
source("analysis.R")
analysis()
head(activity$steps)
activity2 <- activity
for (i in 1:nrow(activity)) {
print(i)
}
for (i in 1:nrow(activity)) {
if (is.na(activity$steps) == TRUE) {
print(i)
}
}
warnings()
for (i in 1:nrow(activity)) {
if (is.na(activity$steps[i]) == TRUE) {
print(i)
}
}
for (i in 1:nrow(activity)) {
if (is.na(activity$steps[i]) == TRUE) {
interval_temp = activity$interval[i]
print(interval_temp)
}
}
average_steps_interval
for (i in 1:nrow(activity)) {
if (is.na(activity$steps[i]) == TRUE) {
interval_temp = activity$interval[i]
mean_steps <- average_steps_interval[Internal == interval_temp]
print(mean_steps)
}
}
for (i in 1:nrow(activity)) {
if (is.na(activity$steps[i]) == TRUE) {
interval_temp = activity$interval[i]
mean_steps <- average_steps_interval[Interval == interval_temp]
print(mean_steps)
}
}
interval_temp
average_steps_interval[average_steps_interval$Interval == 0]
average_steps_interval$MeanSteps[average_steps_interval$Interval == 0]
average_steps_interval
for (i in 1:nrow(activity)) {
if (is.na(activity$steps[i]) == TRUE) {
interval_temp = activity$interval[i]
mean_steps <- average_steps_interval$MeanSteps[average_steps_interval$Interval == 0]
print(mean_steps)
}
}
for (i in 1:nrow(activity)) {
if (is.na(activity$steps[i]) == TRUE) {
interval_temp = activity$interval[i]
mean_steps <- average_steps_interval$MeanSteps[average_steps_interval$Interval == interval_temp]
print(mean_steps)
}
}
for (i in 1:nrow(activity)) {
if (is.na(activity$steps[i]) == TRUE) {
interval_temp = activity$interval[i]
mean_steps <- average_steps_interval$MeanSteps[average_steps_interval$Interval == interval_temp]
activity$steps[i] <- mean_steps
}
}
head(activity)
# Total number of steps taken per day
total_steps_day_imputed <- aggregate(x = activity$steps, by = list(activity$date), FUN = sum, na.rm = TRUE)
names(total_steps_day_imputed) <- c("Date", "TotalSteps")
# Mean and median of the total number of steps taken per day
mean_total_steps_day_imputed <- mean(x = total_steps_day_imputed$TotalSteps)
median_total_steps_day_imputed <- median(x = total_steps_day_imputed$TotalSteps)
cuts1 <- data.frame(Summary = "Mean", vals = mean_total_steps_day_imputed)
cuts2 <- data.frame(Summary = "Median", vals = median_total_steps_day_imputed)
cuts <- rbind(cuts1, cuts2)
print(noquote("What are the mean and median of the total number of steps taken per day?"))
write.table(cuts, row.names = FALSE, col.names = FALSE, quote = FALSE)
source("analysis.R")
analysis()
source("analysis.R")
analysis()
source("analysis.R")
analysis()
source("analysis.R")
analysis()
source("analysis.R")
analysis()
source("analysis.R")
analysis()
day(activity$date)
wday(activity$date)
if (wday(activity$date) <= 5) {
activity$day <- "weekday"
} else {
activity$day <- "weekend"
}
activity$day
library(lubridate)
library(ggplot2)
##### Loading and preprocessing the data
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",
destfile = "activity.zip")
unzip(zipfile = "activity.zip")
activity <- read.csv(file = "activity.csv")
##### Mean total number of steps taken per day
# Total number of steps taken per day
total_steps_day <- aggregate(x = activity$steps, by = list(activity$date), FUN = sum, na.rm = TRUE)
names(total_steps_day) <- c("Date", "TotalSteps")
# Mean and median of the total number of steps taken per day
mean_total_steps_day <- mean(x = total_steps_day$TotalSteps)
median_total_steps_day <- median(x = total_steps_day$TotalSteps)
cuts1 <- data.frame(Summary = "Mean", vals = mean_total_steps_day)
cuts2 <- data.frame(Summary = "Median", vals = median_total_steps_day)
cuts <- rbind(cuts1, cuts2)
print(noquote("What are the mean and median of the total number of steps taken per day?"))
write.table(cuts, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Histogram of the total number of steps taken each day
ggplot(data = total_steps_day, mapping = aes(total_steps_day$TotalSteps))+geom_histogram(binwidth = 1000)+
labs(x="Total Number of Steps Taken Per Day", y="Count")+
geom_vline(data=cuts, aes(xintercept=vals, linetype=Summary, colour = Summary), show.legend = TRUE)+
theme(legend.position=c(0.8, 0.8))+ggsave("total_steps_day.png")
##### Average daily activity pattern
# Time series plot of the 5-minute interval and the average number of steps taken, averaged across all days
average_steps_interval <- aggregate(x = activity$steps, by = list(activity$interval), FUN = mean, na.rm = TRUE)
names(average_steps_interval) <- c("Interval", "MeanSteps")
png("time_series_plot.png")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 200, y = 200, legend = max_steps_interval, bty = "n", text.col = "blue")
dev.off()
print(noquote("Which 5-minute interval, on average across all the days in the dataset,"))
print(noquote("contains the maximum number of steps?"))
print(max_steps_interval)
##### Imputing missing values
# Total number of missing values in the dataset
number_missing_values <- sum(is.na(activity$steps))
print(noquote("Total number of missing values in the dataset:"))
print(number_missing_values)
# Use the mean for that 5-minute interval and create a new dataset that is equal to the original dataset but with
# the missing data filled in.
for (i in 1:nrow(activity)) {
if (is.na(activity$steps[i]) == TRUE) {
interval_temp = activity$interval[i]
mean_steps <- average_steps_interval$MeanSteps[average_steps_interval$Interval == interval_temp]
activity$steps[i] <- mean_steps
}
}
# Total number of steps taken per day
total_steps_day_imputed <- aggregate(x = activity$steps, by = list(activity$date), FUN = sum, na.rm = TRUE)
names(total_steps_day_imputed) <- c("Date", "TotalSteps")
# Mean and median of the total number of steps taken per day
mean_total_steps_day_imputed <- mean(x = total_steps_day_imputed$TotalSteps)
median_total_steps_day_imputed <- median(x = total_steps_day_imputed$TotalSteps)
cuts1_imputed <- data.frame(Summary = "Mean", vals = mean_total_steps_day_imputed)
cuts2_imputed <- data.frame(Summary = "Median", vals = median_total_steps_day_imputed)
cuts_imputed <- rbind(cuts1_imputed, cuts2_imputed)
print(noquote("What are the mean and median of the total number of steps taken per day after imputing"))
print(noquote("missing values?"))
write.table(cuts_imputed, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Histogram of the total number of steps taken each day
ggplot(data = total_steps_day_imputed, mapping = aes(total_steps_day_imputed$TotalSteps))+
geom_histogram(binwidth = 1000)+
labs(x="Total Number of Steps Taken Per Day", y="Count")+
geom_vline(data=cuts_imputed, aes(xintercept=vals, linetype=Summary, colour = Summary), show.legend = TRUE)+
theme(legend.position=c(0.8, 0.8))+ggsave("total_steps_day_imputed.png")
print(noquote("Do these values differ from the estimates from the first part of the assignment?"))
print(noquote(""))
print(noquote("Yes"))
print(noquote(""))
print(noquote("What is the impact of imputing missing data on the estimates of the total daily number of steps?"))
print(noquote(""))
print(noquote("Both the mean and median increase and the histrogram is more Gaussian"))
##### Differences in activity patterns between weekdays and weekends
# Create a new factor variable in the dataset indicating whether a given date is a "weekday" or "weekend" day
wday(activity$date)
activity2 <- activity
activity2$day <- wday(activity2$date)
head(activity2)
table(activity2$day)
activity$day[activity$day <= 5] <- "weekday"
table(activity2$day)
activity$wday[activity$day <= 5] <- "weekday"
subset(activity2$day, activity2$day <= 5) <- "weekday"
subset(activity2, activity2$day <= 5) <- "weekday"
subset(activity2, activity2$day <= 5)
subset(activity2$day, activity2$day <= 5)
subset(activity2$day, activity2$day <= 5) <- "weekday"
wday(activity2$date)
wday(activity2$date)[wday(activity$date) <= 5]
activity$wday <- wday(activity$date)
activity$wday
if(activity$wday <= 5) {activity$val <- "weekday"}
activity$val
library(lubridate)
library(ggplot2)
##### Loading and preprocessing the data
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",
destfile = "activity.zip")
unzip(zipfile = "activity.zip")
activity <- read.csv(file = "activity.csv")
##### Mean total number of steps taken per day
# Total number of steps taken per day
total_steps_day <- aggregate(x = activity$steps, by = list(activity$date), FUN = sum, na.rm = TRUE)
names(total_steps_day) <- c("Date", "TotalSteps")
# Mean and median of the total number of steps taken per day
mean_total_steps_day <- mean(x = total_steps_day$TotalSteps)
median_total_steps_day <- median(x = total_steps_day$TotalSteps)
cuts1 <- data.frame(Summary = "Mean", vals = mean_total_steps_day)
cuts2 <- data.frame(Summary = "Median", vals = median_total_steps_day)
cuts <- rbind(cuts1, cuts2)
print(noquote("What are the mean and median of the total number of steps taken per day?"))
write.table(cuts, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Histogram of the total number of steps taken each day
ggplot(data = total_steps_day, mapping = aes(total_steps_day$TotalSteps))+geom_histogram(binwidth = 1000)+
labs(x="Total Number of Steps Taken Per Day", y="Count")+
geom_vline(data=cuts, aes(xintercept=vals, linetype=Summary, colour = Summary), show.legend = TRUE)+
theme(legend.position=c(0.8, 0.8))+ggsave("total_steps_day.png")
##### Average daily activity pattern
# Time series plot of the 5-minute interval and the average number of steps taken, averaged across all days
average_steps_interval <- aggregate(x = activity$steps, by = list(activity$interval), FUN = mean, na.rm = TRUE)
names(average_steps_interval) <- c("Interval", "MeanSteps")
png("time_series_plot.png")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
# 5-minute interval, on average across all the days in the dataset, which contains the maximum number of steps
max_steps_interval = average_steps_interval$Interval[average_steps_interval$MeanSteps ==
max(average_steps_interval$MeanSteps)]
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 200, y = 200, legend = max_steps_interval, bty = "n", text.col = "blue")
dev.off()
print(noquote("Which 5-minute interval, on average across all the days in the dataset,"))
print(noquote("contains the maximum number of steps?"))
print(max_steps_interval)
##### Imputing missing values
# Total number of missing values in the dataset
number_missing_values <- sum(is.na(activity$steps))
print(noquote("Total number of missing values in the dataset:"))
print(number_missing_values)
# Use the mean for that 5-minute interval and create a new dataset that is equal to the original dataset but with
# the missing data filled in.
for (i in 1:nrow(activity)) {
if (is.na(activity$steps[i]) == TRUE) {
interval_temp = activity$interval[i]
mean_steps <- average_steps_interval$MeanSteps[average_steps_interval$Interval == interval_temp]
activity$steps[i] <- mean_steps
}
}
# Total number of steps taken per day
total_steps_day_imputed <- aggregate(x = activity$steps, by = list(activity$date), FUN = sum, na.rm = TRUE)
names(total_steps_day_imputed) <- c("Date", "TotalSteps")
# Mean and median of the total number of steps taken per day
mean_total_steps_day_imputed <- mean(x = total_steps_day_imputed$TotalSteps)
median_total_steps_day_imputed <- median(x = total_steps_day_imputed$TotalSteps)
cuts1_imputed <- data.frame(Summary = "Mean", vals = mean_total_steps_day_imputed)
cuts2_imputed <- data.frame(Summary = "Median", vals = median_total_steps_day_imputed)
cuts_imputed <- rbind(cuts1_imputed, cuts2_imputed)
print(noquote("What are the mean and median of the total number of steps taken per day after imputing"))
print(noquote("missing values?"))
write.table(cuts_imputed, row.names = FALSE, col.names = FALSE, quote = FALSE)
# Histogram of the total number of steps taken each day
ggplot(data = total_steps_day_imputed, mapping = aes(total_steps_day_imputed$TotalSteps))+
geom_histogram(binwidth = 1000)+
labs(x="Total Number of Steps Taken Per Day", y="Count")+
geom_vline(data=cuts_imputed, aes(xintercept=vals, linetype=Summary, colour = Summary), show.legend = TRUE)+
theme(legend.position=c(0.8, 0.8))+ggsave("total_steps_day_imputed.png")
print(noquote("Do these values differ from the estimates from the first part of the assignment?"))
print(noquote(""))
print(noquote("Yes"))
print(noquote(""))
print(noquote("What is the impact of imputing missing data on the estimates of the total daily number of steps?"))
print(noquote(""))
print(noquote("Both the mean and median increase and the histrogram is more Gaussian"))
##### Differences in activity patterns between weekdays and weekends
# Create a new factor variable in the dataset indicating whether a given date is a "weekday" or "weekend" day
activity2 <- activity
apply(activity, activity$steps, mean)
apply(activity, activity$steps, mean, na.rm = TRUE)
weekday <- function(n) {
if (n <= 5) {
return("weekday")
} else {
return("weekend")
}
}
weekday(1)
weekday(5)
weekday(6)
activity2$wday <- weekday(wday(activity2$date))
activity2$wday <- wday(activity2$date)
head(activity2)
table(activity2$wday)
activity2$wday[activity2$wday <= 5] <- "weekday"
table(activity2$wday)
activity$wday[wday(activity$date) <= 5] <- "weekday"
activity$wday[wday(activity$date) > 5] <- "weekend"
table(activity$wday)
head(activity)
average_steps_interval_wday <- aggregate(x = activity$steps, by = list(activity$interval, activity$wday),
FUN = mean, na.rm = TRUE)
average_steps_interval_wday
average_steps_interval_wday <- aggregate(x = activity$steps, by = list(activity$interval, activity$wday),
FUN = mean, na.rm = TRUE)
names(average_steps_interval) <- c("Interval", "wday", "MeanSteps")
average_steps_interval_wday <- aggregate(x = activity$steps, by = list(activity$interval, activity$wday),
FUN = mean, na.rm = TRUE)
names(average_steps_interval_wday) <- c("Interval", "wday", "MeanSteps")
average_steps_interval_wday
library(lattice)
xyplot(MeanSteps ~ Interval | wday, data = average_steps_interval_wday)
panel_plot <- xyplot(MeanSteps ~ Interval | wday, data = average_steps_interval_wday)
print(panel_plot)
dev.off()
dev.set(0)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
panel_plot <- xyplot(MeanSteps ~ Interval | wday, data = average_steps_interval_wday)
print(panel_plot)
panel_plot <- xyplot(MeanSteps ~ Interval | wday, data = average_steps_interval_wday, type = "b")
print(panel_plot)
panel_plot <- xyplot(MeanSteps ~ Interval | wday, data = average_steps_interval_wday, type = "b", plot.points = FALSE)
print(panel_plot)
panel_plot <- xyplot(MeanSteps ~ Interval | wday, data = average_steps_interval_wday, type = "b", plot.points = FALSE)
print(panel_plot)
panel_plot <- xyplot(MeanSteps ~ Interval | wday, data = average_steps_interval_wday, type = "l")
print(panel_plot)
panel_plot <- xyplot(MeanSteps ~ Interval | wday, data = average_steps_interval_wday, type = "l", ylab = "Average Number of Steps Taken")
plot(panel_plot)
source("analysis.R")
analysis()
source("analysis.R")
analysis()
source("analysis.R")
analysis()
head(activity)
tail(activity)
activity <- read.csv(file = "activity.csv")}
```{download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",
```{1+1}
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",
destfile = "activity.zip")
unzip(zipfile = "activity.zip")
activity <- read.csv(file = "activity.csv")
source("analysis.R")
analysis()
dev.off()
dev.off()
dev.off()
dev.off()
```{r}
png("time_series_plot.png")
with(data = average_steps_interval, expr = plot(x = Interval, y = MeanSteps, type = "l",
ylab = "Average Number of Steps Taken"))
abline(v = max_steps_interval, col = "blue", lwd = 2)
legend(x = 200, y = 200, legend = max_steps_interval, bty = "n", text.col = "blue")
dev.off()
print(number_missing_values)
source("analysis.R")
analysis()
source("analysis.R")
analysis()
source("analysis.R")
analysis()
source("analysis.R")
analysis()
